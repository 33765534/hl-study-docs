(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{306:function(a,t,s){"use strict";s.r(t);var i=s(14),n=Object(i.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"this-指向是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this-指向是什么"}},[a._v("#")]),a._v(" this 指向是什么")]),a._v(" "),s("p",[a._v("在常见的编程语言中，几乎都有this 这个关键字（Objective-C 中使用的是self），但是在JavaScript中的this 不太一样。")]),a._v(" "),s("ul",[s("li",[a._v("常见的面向对象的编程语言中，比如Java、C++、Swift、Dart 等等一系列语言中，this 通常指挥出现在类的方法中。")]),a._v(" "),s("li",[a._v("但是在JavaScript中，this 更加灵活，无论是它出现的位置还是它代表的含义。")]),a._v(" "),s("li",[a._v("它没有固定的指向，this 的指向是动态的，是由函数的调用方式决定的。")])]),a._v(" "),s("p",[a._v("我们先来看一下有 this 和没this 的区别：\n"),s("img",{attrs:{src:a.$withBase("/images/image-26.png"),alt:"JS"}})]),a._v(" "),s("h3",{attrs:{id:"this-指向什么尼"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this-指向什么尼"}},[a._v("#")]),a._v(" this 指向什么尼？")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("首先，this 指向调用它的对象")])]),a._v(" "),s("li",[s("p",[a._v("在全局作用域下，this 指向window(浏览器) 注：在Node环境下，this 指向global打印出的是{}")]),a._v(" "),s("img",{attrs:{src:a.$withBase("/images/image-27.png"),alt:"JS"}})]),a._v(" "),s("li",[s("p",[a._v("在类中，this 指向类的实例")])]),a._v(" "),s("li",[s("p",[a._v("箭头函数中的this 指向定义箭头函数时所在的作用域")])]),a._v(" "),s("li",[s("p",[a._v("构造函数中的this 指向构造函数的实例")])])]),a._v(" "),s("p",[a._v("开发中很少直接在全局作用域下使用this，所以大部分情况下，我们都是在对象的方法中或者函数中使用this。")]),a._v(" "),s("ul",[s("li",[a._v("所有的函数在被调用时，都会创建一个执行上下文（execution context）")]),a._v(" "),s("li",[a._v("这个执行上下文中包含两个重要的属性：\n"),s("ul",[s("li",[a._v("变量对象（variable object）")]),a._v(" "),s("li",[a._v("作用域链（scope chain）")])])]),a._v(" "),s("li",[a._v("其中，变量对象包含了函数的形参、函数声明、变量声明等。")]),a._v(" "),s("li",[a._v("作用域链包含了变量对象的引用，以及父级作用域的引用。")]),a._v(" "),s("li",[a._v("函数在执行时，会创建一个称为活动对象（activation object）的执行上下文，这个执行上下文会包含变量对象、作用域链、this等。")]),a._v(" "),s("li",[a._v("函数执行完毕后，这个执行上下文会被销毁，但是活动对象会一直保存在内存中，直到函数执行完毕。")]),a._v(" "),s("li",[a._v("因此，在函数执行期间，this 的指向会根据函数的调用方式而动态改变。")]),a._v(" "),s("li",[a._v("这就是为什么在JavaScript中，this 的指向是不确定的原因。")])]),a._v(" "),s("p",[a._v("注：this 指向根我们的调用犯法和调用位置有关，和定义位置无关，不是在编译阶段绑定的，而是在执行阶段绑定的。")]),a._v(" "),s("h2",{attrs:{id:"this-的指向可以总结为以下四个规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this-的指向可以总结为以下四个规则"}},[a._v("#")]),a._v(" this 的指向可以总结为以下四个规则")]),a._v(" "),s("h3",{attrs:{id:"规则一-默认绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则一-默认绑定"}},[a._v("#")]),a._v(" 规则一 ： 默认绑定")]),a._v(" "),s("p",[a._v("什么情况下使用默认绑定尼？独立函数调用")]),a._v(" "),s("ul",[s("li",[a._v("独立函数调用我们就可以理解成函数没有绑定到某个对象上进行调用")]),a._v(" "),s("li",[a._v("函数被独立调用的时候 this 指向window\n"),s("img",{attrs:{src:a.$withBase("/images/image-24.png"),alt:"JS"}})])]),a._v(" "),s("h3",{attrs:{id:"规则二-隐式绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则二-隐式绑定"}},[a._v("#")]),a._v(" 规则二 ： 隐式绑定")]),a._v(" "),s("p",[a._v("另外一种比较常见的调用方式是通过某个对象进行调用的")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("也就是它的调用位置中，是通过某个对象发起的函数调用")])]),a._v(" "),s("li",[s("p",[a._v("通过某个对象发起的函数调用，会隐式绑定this指向某个对象，obj.foo()隐式把obj绑定给函数foo")]),a._v(" "),s("img",{attrs:{src:a.$withBase("/images/image-25.png"),alt:"JS"}})])]),a._v(" "),s("h3",{attrs:{id:"规则三-显示绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则三-显示绑定"}},[a._v("#")]),a._v(" 规则三 ： 显示绑定")]),a._v(" "),s("p",[a._v("隐式绑定有一个前提条件，那就是它必须是一个对象，如果没有这样的引用，那么this会直接指向全局对象或者undefined。\n如果我们不希望在对象内部调用函数，而是想直接在函数上进行调用，就可以使用call、apply、bind方法。")]),a._v(" "),s("ul",[s("li",[a._v("call和apply 区别\n"),s("ul",[s("li",[a._v("call和apply的作用完全一样，只是接受参数的方式不太一样")]),a._v(" "),s("li",[a._v("call的第一个参数是this要指向的对象，后面是一个一个参数")]),a._v(" "),s("li",[a._v("apply的第一个参数是this要指向的对象，后面是一个数组")])])]),a._v(" "),s("li",[a._v("其中call和apply会立即执行函数，而bind方法会返回一个改变了this指向的函数")])]),a._v(" "),s("p",[a._v("上面的绑定过程，我们明确的绑定了this指向，所以称之为显示绑定。")]),a._v(" "),s("h3",{attrs:{id:"规则四-new-绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则四-new-绑定"}},[a._v("#")]),a._v(" 规则四 ： new 绑定")]),a._v(" "),s("p",[a._v("new 绑定是JavaScript中最强大的绑定方式，使用new来调用函数，会自动执行下面的操作：")]),a._v(" "),s("ul",[s("li",[a._v("创建一个全新的对象")]),a._v(" "),s("li",[a._v("这个新对象会被执行[[原型]]连接")]),a._v(" "),s("li",[a._v("这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）")]),a._v(" "),s("li",[a._v("如果函数没有返回自定义对象，那么new表达式中的函数调用会自动返回这个新对象")])]),a._v(" "),s("h3",{attrs:{id:"内置函数的绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置函数的绑定"}},[a._v("#")]),a._v(" 内置函数的绑定")]),a._v(" "),s("ul",[s("li",[a._v("JavaScript内置了一些函数，比如Math、Array等，这些函数的this指向的是全局对象\n"),s("ul",[s("li",[a._v("数组的方法第二个参数是绑定this,如果没有绑定 默认this指向是window,除了箭头函数，箭头函数this指向上层作用域")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var names = ['a', 'b', 'c'];\nnames.forEach(function(item) {\n  console.log(item,this);\n},'abc');\nnames.forEach(function(item) {\n  console.log(item,this);\n},'bca');\n")])])])]),a._v(" "),s("li",[a._v("还有DOM和BOM的原生方法，比如DOM的document.getElementById()等，这些方法的this指向的是DOM对象")]),a._v(" "),s("li",[a._v("setTimeout和setInterval中的函数的this指向的是window（不用箭头函数的情况下）")]),a._v(" "),s("li",[s("img",{attrs:{src:a.$withBase("/images/image-28.png"),alt:"JS"}}),a._v(" "),s("img",{attrs:{src:a.$withBase("/images/image-29.png"),alt:"JS"}})])]),a._v(" "),s("h3",{attrs:{id:"优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先级"}},[a._v("#")]),a._v(" 优先级")]),a._v(" "),s("p",[a._v("new绑定 > 显示绑定 > 隐式绑定 > 默认绑定")]),a._v(" "),s("p",[a._v("call、apply的显示绑定高于隐式绑定")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function foo() {\n  console.log(this.a);\n}\n\nvar obj1 = {\n  a: 2 \n};\n\nvar obj2 = { \n  a: 3,\n  foo: foo\n};\n\nobj2.foo.call(obj1); // 2\n")])])]),s("p",[a._v("bind的显示绑定高于隐式绑定")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function foo() {\n  console.log(this.a);\n}\n\nvar obj1 = {\n  a: 2 \n};\n\nvar obj2 = { \n  a: 3,\n  foo: foo\n};\n\nvar bar = foo.bind(obj1);\nbar.call(obj2); // 2\n")])])]),s("p",[a._v("new 绑定高于隐式绑定")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var obj={\n  name:'张三',\n  foo:function(){\n    console.log(this);\n  }\n}\nvar bar=new obj.foo();// {} new出来的新对象\n")])])]),s("p",[a._v("new 绑定高于显示绑定")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("function foo() {\n  console.log(this);\n}\n\nvar bar = foo.bind({ a: 3 });\n\nvar obj=new bar(); // {} new出来的新对象\n")])])]),s("p",[a._v("特殊场景")]),a._v(" "),s("ul",[s("li",[a._v("当 call、apply、bind 绑定的是null和undefined的时候，这两个值在调用的时候会被忽略，实际应用的是默认绑定规则(this绑定成window)")]),a._v(" "),s("li",[a._v("间接函数引用")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var obj1={\n  name:'obj1',\n  foo:function(){\n    console.log(this);\n  }\n}\nvar obj2={\n  name:'obj2'\n}\n\n(obj2.bar = obj1.foo)(); // window\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);