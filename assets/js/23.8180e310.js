(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{305:function(a,t,e){"use strict";e.r(t);var s=e(14),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"javascript-是一门编程语言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是一门编程语言"}},[a._v("#")]),a._v(" JavaScript 是一门编程语言")]),a._v(" "),e("p",[a._v("JavaScript 是一门跨平台、面向对象的轻量级编程语言。它被世界上的绝大多数网站所使用，也被世界主流浏览器（IE、Firefox、Chrome、Safari、Opera等）支持。它是一种脚本语言，可以用来控制网页的行为，实现网页特效，与服务器进行交互，以及编写桌面应用程序。")]),a._v(" "),e("p",[a._v("JavaScript 是一门高级的编程语言，那么有高级编程语言，就有低级编程语言。低级编程语言通常被称为汇编语言。")]),a._v(" "),e("p",[a._v("从编程语言发展历史来说，可以划分为三个阶段：")]),a._v(" "),e("ol",[e("li",[a._v("机器语言阶段:1000100111011000,一些机器指令；")]),a._v(" "),e("li",[a._v("汇编语言阶段:BASIC,Cobol,Fortran,Pascal等；")]),a._v(" "),e("li",[a._v("高级语言阶段:JavaScript,Python,Ruby,PHP等。\n"),e("img",{attrs:{src:a.$withBase("/images/image.png"),alt:"JS"}})])]),a._v(" "),e("h2",{attrs:{id:"浏览器工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器工作原理"}},[a._v("#")]),a._v(" 浏览器工作原理")]),a._v(" "),e("p",[a._v("输入一个网址之后浏览器做了什么？")]),a._v(" "),e("ol",[e("li",[a._v("浏览器会开启一个线程来处理这个请求，会从浏览器缓存中查找当前网址对应的请求结果；")]),a._v(" "),e("li",[a._v("如果浏览器缓存中存在当前网址对应的请求结果则直接返回；")]),a._v(" "),e("li",[a._v("如果浏览器缓存中不存在当前网址对应的请求结果，则向服务器发起请求；")]),a._v(" "),e("li",[a._v("服务器收到请求后，会根据请求的URL在自身存储的数据（静态资源）中查找对应的数据（index.html）并返回给浏览器；")]),a._v(" "),e("li",[a._v("浏览器收到返回的数据后，会根据HTML的格式将数据构建成DOM，并根据CSS的格式将数据构建成CSSOM，最后将DOM和CSSOM整合成渲染树(Render Tree)，然后浏览器开始渲染页面的内容。")])]),a._v(" "),e("p",[a._v("比如：www.baidu.com > dns(域名解析)>找到ip服务器地址 > 解析返回一个html > 解析html 遇到css/js文件 下载到浏览器中\n"),e("img",{attrs:{src:a.$withBase("/images/image-1.png"),alt:"JS"}})]),a._v(" "),e("h2",{attrs:{id:"浏览器内核"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[a._v("#")]),a._v(" 浏览器内核")]),a._v(" "),e("p",[a._v("不同的浏览器有不同的浏览器内核，\nBlink内核 是Google开发的，目前用于Google Chrome、Edge、Opera等\n浏览器的内核实际上指的是浏览器的排版引擎，不同的浏览器取名不同，有浏览器引擎、\n页面渲染引擎等等")]),a._v(" "),e("p",[a._v("浏览器内核又可以分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。")]),a._v(" "),e("h2",{attrs:{id:"浏览器渲染过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染过程"}},[a._v("#")]),a._v(" 浏览器渲染过程")]),a._v(" "),e("p",[a._v("HTML Parser 是将HTML解析成DOM Tree的解析器")]),a._v(" "),e("p",[a._v("CSS Parser 是将CSS文件解析成CSSOM（CSS Object Model）")]),a._v(" "),e("p",[a._v("过程：\n拿到HTML 浏览器内核的 HTML Parser 会将html解析成Dom tree ,\n以及拿到 Style Sheets 浏览器会进行 CSS Parser将css解析成的 Style rules(css规则) > Attachment(附加)结合在一起>生成Render tree渲染树 >painting(绘制)>Display展示")]),a._v(" "),e("p",[a._v("Layout布局引擎（不同的浏览器分辨率等不同）>生成最终的Render tree渲染树\nDOM节点通过js可以对Dom进行操作")]),a._v(" "),e("img",{attrs:{src:a.$withBase("/images/image-2.png"),alt:"JS"}}),a._v(" "),e("h2",{attrs:{id:"认识-javascript-引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#认识-javascript-引擎"}},[a._v("#")]),a._v(" 认识 JavaScript 引擎")]),a._v(" "),e("p",[a._v("浏览器内核和JS引擎的关系？\n我们先以 WebKit 为例，WebKit 内核包含两部分：")]),a._v(" "),e("ol",[e("li",[a._v("WebCore 是渲染引擎，负责页面渲染和布局，")]),a._v(" "),e("li",[a._v("JavaScriptCore 是 JS 引擎，负责解析和执行 JavaScript")])]),a._v(" "),e("p",[a._v("JS引擎是浏览器内核的一部分，负责解析和执行JavaScript代码。")]),a._v(" "),e("img",{attrs:{src:a.$withBase("/images/image-3.png"),alt:"JS"}}),a._v(" "),e("p",[a._v("JavaScript 引擎可以被描述为“读取、执行 JavaScript 代码的程序”。")]),a._v(" "),e("h2",{attrs:{id:"v8引擎的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v8引擎的原理"}},[a._v("#")]),a._v(" V8引擎的原理")]),a._v(" "),e("p",[a._v("V8引擎是Google开发的开源JavaScript引擎，它被用于Chrome和Node.js等浏览器和运行时环境中。\nv8引擎可以独立运行，也可以嵌入到其他应用程序中。如：C++ 等")]),a._v(" "),e("img",{attrs:{src:a.$withBase("/images/image-4.png"),alt:"JS"}}),a._v(" "),e("p",[a._v("v8引擎负责解析 JavaScript 代码，并将其转换为抽象语法树（AST）。然后，它会对 AST 进行优化，并生成机器代码。最后，它将机器代码转换为汇编语言，并最终执行该代码。")]),a._v(" "),e("p",[a._v("流程如：\njs代码 > Parse(解析成 词法分析 和 语法分析) > AST(抽象语法树) > lgnition(解释器/转化器) >  生成bytecode字节码（不直接转成机器代码是因为可能JS跑的环境不同所以产生的机器代码也不同，如可能跑在Mac浏览器，window浏览器或Linux）> 机器代码(汇编码) > CPU运行结果")]),a._v(" "),e("p",[a._v("AST 网址：(babel、ts、template 都是转换成asts)\nastexplorer.net\n例：const name='abc'\n词法分析：帮助我们切割成 tokens:[{type:'keyword',value:'const'},{type:'identifier',value:'name'}]\n语法分析：把词法分析的一个个小对象解析成AST")]),a._v(" "),e("p",[a._v("扩展：\nTurboFan 收集热函数(执行频率比较高的)，优化的机器指令 > CPU运行 ，如果：类型没有统一v8就不好做热函数，所以ts相比普通函数运行性能相对高一点，因为ts类型统一了，v8可以收集到热函数，优化机器指令，所以ts运行性能高一点。")]),a._v(" "),e("p",[a._v("官方V8引擎的解析图：\n"),e("img",{attrs:{src:a.$withBase("/images/image-5.png"),alt:"JS"}})]),a._v(" "),e("p",[a._v("Blink 浏览器内核 ———> 解析 html 下载js将源码交给V8 引擎\nStream(字符编码转换)获取到源码并且进行编码转换\n给Scanner（扫描器）会尽心词法分析 ——> 转成多个tokens 会被转换成 AST 树，经过 Parser 和 PreParser")]),a._v(" "),e("p",[a._v("PreParser预解析，为什么需要与解析尼？这是因为并不是所有js代码，在一开始就会被执行。那么堆所有js 代码进行解析，必然会影响网页的运行效率。")]),a._v(" "),e("p",[a._v("所以 V8 引擎实现了 Lazy Parsing(延迟解析)的方案，将不必要的函数进行与解析，在函数被调用时才会进行函数的全量解析。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// inner 一开始是不会解析的，不会转换成 Ast 树的\nfunction outer(){\n    function inner(){\n\n    }\n}\n\nouter()\n")])])]),e("h2",{attrs:{id:"初始化全局对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化全局对象"}},[a._v("#")]),a._v(" 初始化全局对象")]),a._v(" "),e("p",[a._v("js 引擎在执行代码之前，会在堆内存中创建一个全局对象:Global Object(GO)，这个全局对象包含了全局变量和函数。")]),a._v(" "),e("p",[a._v("堆：存放对象"),e("br"),a._v("\n栈：存放变量")]),a._v(" "),e("img",{attrs:{src:a.$withBase("/images/image-6.png"),alt:"JS"}}),a._v(" "),e("h2",{attrs:{id:"执行上下文栈-调用栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈-调用栈"}},[a._v("#")]),a._v(" 执行上下文栈（调用栈）")]),a._v(" "),e("p",[a._v("js 引擎内部有一个执行上下文栈（Execution context stack，简称ECS），用来存储在代码执行期间创建的所有执行上下文。\n那么他要执行谁尼？执行的是全局代码块：")]),a._v(" "),e("ol",[e("li",[a._v("全局的代码块为了执行会构建一个 Global Execution Context 简称GEC（全局执行上下文）")]),a._v(" "),e("li",[a._v("GEC 会被放入到 ECS 栈中，ECS 栈中默认有一个全局执行上下文，全局执行上下文是 js 引擎执行代码的起点。")]),a._v(" "),e("li",[a._v("全局执行上下文被激活，开始执行代码，当全局执行上下文执行完毕，会被销毁，然后 ECS 栈会弹出该全局执行上下文。")])]),a._v(" "),e("p",[a._v("GEC 被放入到 ECS 栈中里面包含两部分内容：")]),a._v(" "),e("ol",[e("li",[a._v("第一部分：在代码执行前，在parser转成 AST 的过程中，会将全局定义的变量和函数等加入到 GlobalObject 中，但是并不会赋值。\n在 ES5 中当我们在变量赋值前 访问变量的时候得到的是 undefined\n"),e("img",{attrs:{src:a.$withBase("/images/image-7.png"),alt:"JS"}})]),a._v(" "),e("li",[a._v("第二部分：在代码执行过程中，对变量赋值，或者执行其他的函数\n"),e("img",{attrs:{src:a.$withBase("/images/image-8.png"),alt:"JS"}})])])])}),[],!1,null,null,null);t.default=r.exports}}]);