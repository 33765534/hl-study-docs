(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{311:function(n,t,a){"use strict";a.r(t);var v=a(14),r=Object(v.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"纯函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纯函数"}},[n._v("#")]),n._v(" 纯函数")]),n._v(" "),a("p",[n._v("维基百科上对纯函数的定义是：")]),n._v(" "),a("ol",[a("li",[n._v("相同的输入始终要得到相同的输出。")]),n._v(" "),a("li",[n._v("函数的输出和输入值以外的其他隐藏信息或状态无关，也和由I/O设备产生的外部输出无关。")]),n._v(" "),a("li",[n._v("该函数不能有语义上可观察的副作用，诸如“触发事件”，使输出设备改变，或影响除该函数以外的其他程序或数据结构。")])]),n._v(" "),a("p",[n._v("确定的输入，一定会产生确定的输出；函数在执行过程中，不能产生副作用；")]),n._v(" "),a("p",[n._v("数组的方法中是纯函数:")]),n._v(" "),a("ol",[a("li",[n._v("map")]),n._v(" "),a("li",[n._v("filter")]),n._v(" "),a("li",[n._v("reduce")]),n._v(" "),a("li",[n._v("slice")]),n._v(" "),a("li",[n._v("every")])]),n._v(" "),a("h2",{attrs:{id:"副作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副作用"}},[n._v("#")]),n._v(" 副作用")]),n._v(" "),a("p",[n._v("在程序中，副作用（side effect）通常被定义为“一个函数对于调用者而言产生的除返回值之外的任何可观察的副作用”。")]),n._v(" "),a("p",[n._v("数组的方法中是非纯函数:")]),n._v(" "),a("ol",[a("li",[n._v("push")]),n._v(" "),a("li",[n._v("pop")]),n._v(" "),a("li",[n._v("unshift")]),n._v(" "),a("li",[n._v("shift")]),n._v(" "),a("li",[n._v("splice")]),n._v(" "),a("li",[n._v("sort")]),n._v(" "),a("li",[n._v("reverse")]),n._v(" "),a("li",[n._v("concat")]),n._v(" "),a("li",[n._v("join")])]),n._v(" "),a("h2",{attrs:{id:"纯函数的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纯函数的好处"}},[n._v("#")]),n._v(" 纯函数的好处")]),n._v(" "),a("ol",[a("li",[n._v("易于测试")]),n._v(" "),a("li",[n._v("易于并行处理")]),n._v(" "),a("li",[n._v("易于优化")]),n._v(" "),a("li",[n._v("易于调试")]),n._v(" "),a("li",[n._v("易于理解")])]),n._v(" "),a("h2",{attrs:{id:"柯里化函数的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#柯里化函数的特点"}},[n._v("#")]),n._v(" 柯里化函数的特点")]),n._v(" "),a("p",[n._v("柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。")]),n._v(" "),a("p",[n._v("只传递给函数一部分参数来调用它，让它返回一个函数去处理剩余的参数。这个过程就是 柯里化。")]),n._v(" "),a("ol",[a("li",[n._v("参数复用")]),n._v(" "),a("li",[n._v("业务解耦，调用时机灵活")]),n._v(" "),a("li",[n._v("延迟执行，部分求值")])]),n._v(" "),a("p",[n._v("示例：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function sum(num1,num2,num3,num4) {\n    console.log(num1,num2,num3,num4);\n}\n\nvar newSum = sum.bind("aaa",10);\nnewSum(20,30,40);\n')])])]),a("p",[n._v("柯里化函数以及简化的柯里化代码：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function sum1(x) {\n    return function(y) {\n        return function(z) {\n            return x + y + z;\n        }\n    }\n}\nvar newSum1 = sum1(10)(20)(30);\n\n// 简化柯里化代码\nvar sum2 = x => y => z => x + y + z;\nvar newSum2 = sum2(10)(20)(30);\n")])])]),a("h3",{attrs:{id:"让函数的职责单一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#让函数的职责单一"}},[n._v("#")]),n._v(" 让函数的职责单一")]),n._v(" "),a("p",[n._v("为什么需要有柯里化的存在？")]),n._v(" "),a("ol",[a("li",[n._v("参数复用，逻辑的复用")]),n._v(" "),a("li",[n._v("在函数式编程中，我们其实往往希望一个函数处理的问题尽可能的单一，而不是将一大堆的处理过程交给一个函数来处理。")]),n._v(" "),a("li",[n._v("单一职责原则：一个函数只负责一件事，这样这个函数才能更被其他函数信任，更可能实现高内聚低耦合。")]),n._v(" "),a("li",[n._v("那么我们是否就可以将每次传入的参数在单一的函数中进行处理，处理完后在下一个函数中再使用处理后的结果。")])]),n._v(" "),a("h3",{attrs:{id:"手写转柯里化函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写转柯里化函数"}},[n._v("#")]),n._v(" 手写转柯里化函数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function myCurrying(fn) {\n    return function(...args) {\n        // 判断当前已经接收的参数的个数，可以参数本身需要接收的参数是否已经一致了\n        // 1.当已经传入的参数 大于等于 需要的参数个数的时候，就可以开始执行函数了\n        if(args.length >= fn.length) {\n            return fn.apply(this,args);\n        }else {\n            // 2.如果没有达到个数，需要返回一个新的函数，继续来接收参数\n            return function(...args2) {\n                // 把已经接收到的参数和最新的参数合并传递给原函数\n                return curried.apply(this,args.concat(args2));\n            }\n        }\n    }\n}\n\n")])])]),a("h2",{attrs:{id:"组合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合函数"}},[n._v("#")]),n._v(" 组合函数")]),n._v(" "),a("p",[n._v("组合(compose) 函数是在 JavaScript 开发过程中一种对函数使用技巧、模式")]),n._v(" "),a("h3",{attrs:{id:"组合函数的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合函数的定义"}},[n._v("#")]),n._v(" 组合函数的定义")]),n._v(" "),a("p",[n._v("组合函数(compose function) 指的是将多个函数组合(chain) 起来，组合后的函数会从右到左依次执行，上一次的执行结果，会作为参数传入给下一次的执行中。")]),n._v(" "),a("h3",{attrs:{id:"组合函数的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合函数的实现"}},[n._v("#")]),n._v(" 组合函数的实现")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function compose(...args) {\n    return function(value) {\n        return args.reverse().reduce((acc,fn) => fn(acc),value);\n    }\n}\n\nfunction pow(x,n) {\n    return Math.pow(x,n);\n}\n\nfunction pow2(x) {\n    return function(n) {\n        return Math.pow(x,n);\n    }\n}\n// 实现一个函数，可以实现对于一个数值的任意次方计算\nconst result = compose(pow2(2),pow2(3));\nconsole.log(result(4));\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);